#  fitting geometric Brownian motion
##############################################
# calculating increments of log-price
log.inc<- c()
price1<- price[-1]
price1.lag<- head(price, -1)
log.ratio<- log(price1/price1.lag)
# plotting histogram of log-price increments
install.packages("rcompanion")
library(rcompanion)
plotNormalHistogram(log.ratio, main="Histogram for Log-price Increments",
xlab="Log-price increments", col="sky blue")
shapiro.test(log.ratio)
print(mu.hat<- mean(log.ratio))
print(sigma.hat<- sd(log.ratio))
#W = 0.90681, p-value < 2.2e-16, not normally distributed
#estimating parameters
# simulating trajectory of geometric Brownian motion
BM<- c()
#specifying initial value
BM[1]<- 0
#specifying seed
set.seed(445042)
#simulating Brownian motion with drift and volatility
nrows<- length(amgendata$amgen_Close)
for (i in 2:nrows)
BM[i]<- mu.hat + BM[i-1] + sigma.hat*rnorm(1)
#computing values for geometric Brownian motion
GBM<-price[1]*exp(BM)
#plotting actual and simulated trajectories
plot(date, price, type="l", lty=1, lwd=2, col="blue", xlab="Time", main="Actual and Simulated Tesla Stock Prices", ylab="Tesla Stock Price", first.panel=grid())
lines(date, GBM, lwd=2, col="green")
legend("bottomright", c("Actual price", "Simulated price"), lty=1, col=c("blue", "green"))
mu.hat <- mean(log.ratio)
sigma.hat <- sd(log.ratio)
BM <- c()
BM[1] <- 0
plot(date, price, type = "l", lty = 1, lwd = 2, col = "blue", xlab = "Time", main = "Actual and Simulated Amgen Stock Prices", ylim = c(0, 500), ylab = "Amgen Stock Price", first.panel = grid())
legend("topleft", c("Actual price", "Simulated price"), lty = 1, col = c("blue", "gray"))
set.seed(1234123)
for (j in 1:10) {
BM <- c()
BM[1] <- 0
nrows <- length(price)
for (i in 2:nrows)
BM[i] <- mu.hat + BM[i - 1] + sigma.hat * rnorm(1)
GBM <- price[1] * exp(BM)
lines(date, GBM, lwd = 2, col = "light gray")
}
#plotting partial autocorrelation function for MA model
pacfma<- ARMAacf(amgendata$amgen_Close, lag.max=9)
plot(1:10,pacfma, type="h", main="Partial Autocorrelation Function for MA Model", xlab="Lag", ylab="PACF")
abline(h=0)
#plotting actual and fitted MA(7) model values
MA7.model<- arima(amgendata$amgen_Close, order = c(0, 0, 7))
plot(as.POSIXct(amgendata$Date), amgendata$amgen_Close, main="Daily amgen Stock
Closing Prices with MA(7) Model", lty=1, pch="", xlab="Time",ylab="Stock Price", panel.first=grid())
lines(as.POSIXct(amgendata$Date), amgendata$amgen_Close, lwd=2, col="green")
lines(as.POSIXct(amgendata$Date), fitted(MA7.model), lwd=1, col="navy")
legend("topright", c("actual","MA(7) fitted"), lty=1, lwd=2, col=c("green","navy"))
#plotting actual and fitted MA(9) model values
MA9.model<- arima(amgendata$amgen_Close, order = c(0, 0, 9))
plot(as.POSIXct(amgendata$Date), amgendata$amgen_Close, main="Daily amgen Stock
Closing Prices with MA(9) Model", lty=1, pch="", xlab="Time",ylab="Stock Price", panel.first=grid())
lines(as.POSIXct(amgendata$Date), amgendata$amgen_Close, lwd=2, col="green")
lines(as.POSIXct(amgendata$Date), fitted(MA9.model), lwd=1, col="navy")
legend("topright", c("actual","MA(9) fitted"), lty=1, lwd=2, col=c("green","navy"))
#plotting actual and fitted MA(10) model values
MA10.model<- arima(amgendata$amgen_Close, order = c(0, 0, 10))
plot(as.POSIXct(amgendata$Date), amgendata$amgen_Close, main="Daily amgen Stock
Closing Prices with MA(10) Model", lty=1, pch="", xlab="Time",ylab="Stock Price", panel.first=grid())
lines(as.POSIXct(amgendata$Date), amgendata$amgen_Close, lwd=2, col="green")
lines(as.POSIXct(amgendata$Date), fitted(MA10.model), lwd=1, col="navy")
legend("topright", c("actual","MA(10) fitted"), lty=1, lwd=2, col=c("green","navy"))
#plotting partial autocorrelation function for MA model
pacfma<- ARMAacf(amgendata$amgen_Close, lag.max=9)
plot(1:10,pacfma, type="h", main="Partial Autocorrelation Function for MA Model", xlab="Lag", ylab="PACF")
abline(h=0)
#plotting actual and fitted MA(7) model values
MA7.model<- arima(amgendata$amgen_Close, order = c(0, 0, 7))
plot(as.POSIXct(amgendata$Date), amgendata$amgen_Close, main="Daily amgen Stock
Closing Prices with MA(7) Model", lty=1, pch="", xlab="Time",ylab="Stock Price", panel.first=grid())
lines(as.POSIXct(amgendata$Date), amgendata$amgen_Close, lwd=2, col="green")
lines(as.POSIXct(amgendata$Date), fitted(MA7.model), lwd=1, col="navy")
legend("topright", c("actual","MA(7) fitted"), lty=1, lwd=2, col=c("green","navy"))
#plotting actual and fitted MA(9) model values
MA9.model<- arima(amgendata$amgen_Close, order = c(0, 0, 9))
plot(as.POSIXct(amgendata$Date), amgendata$amgen_Close, main="Daily amgen Stock
Closing Prices with MA(9) Model", lty=1, pch="", xlab="Time",ylab="Stock Price", panel.first=grid())
lines(as.POSIXct(amgendata$Date), amgendata$amgen_Close, lwd=2, col="green")
lines(as.POSIXct(amgendata$Date), fitted(MA9.model), lwd=1, col="navy")
legend("topright", c("actual","MA(9) fitted"), lty=1, lwd=2, col=c("green","navy"))
#plotting actual and fitted MA(10) model values
MA10.model<- arima(amgendata$amgen_Close, order = c(0, 0, 10))
plot(as.POSIXct(amgendata$Date), amgendata$amgen_Close, main="Daily amgen Stock
Closing Prices with MA(10) Model", lty=1, pch="", xlab="Time",ylab="Stock Price", panel.first=grid())
lines(as.POSIXct(amgendata$Date), amgendata$amgen_Close, lwd=2, col="green")
lines(as.POSIXct(amgendata$Date), fitted(MA10.model), lwd=1, col="navy")
legend("topright", c("actual","MA(10) fitted"), lty=1, lwd=2, col=c("green","navy"))
# Download Amgen Stock Data
getSymbols("AMGN", from = "2020-01-01", to = "2024-07-23")
# Load Required Libraries
if (!requireNamespace("zoo", quietly = TRUE)) {
install.packages("zoo")
}
if (!requireNamespace("TTR", quietly = TRUE)) {
install.packages("TTR")
}
if (!requireNamespace("quantmod", quietly = TRUE)) {
install.packages("quantmod")
}
if (!requireNamespace("plotly", quietly = TRUE)) {
install.packages("plotly")
}
if (!requireNamespace("fANCOVA", quietly = TRUE)) {
install.packages("fANCOVA")
}
library(fANCOVA)
library(TTR)
library(quantmod)
library(dplyr)
library(ggplot2)
library(plotly)
# Download Amgen Stock Data
getSymbols("AMGN", from = "2020-01-01", to = "2024-07-23")
# Convert to Dataframe and Select Relevant Columns
amgen_df <- data.frame(Date = index(AMGN), coredata(AMGN)) %>%
select(Date, AMGN.Adjusted) %>%
rename(amgen_Close = AMGN.Adjusted)
# Save Data to CSV
write.csv(amgen_df, file = "./amgen_stock_data_clean.csv", row.names = FALSE)
# Read and Plot the Data
amgen_data <- read.csv(file = "./amgen_stock_data_clean.csv", header = TRUE, sep = ",")
# Plot Amgen Stock Price
amgen_data$Date <- as.Date(amgen_data$Date, "%Y-%m-%d")  # Convert Date to Date type
amgen_plot <- ggplot(amgen_data, aes(x = Date, y = amgen_Close)) +
geom_line(color = "blue", linewidth = 0.7) +
labs(title = "Daily Closing Price of Amgen Stock", x = "Date", y = "Price") +
theme_minimal()
amgen_plot
#plotting partial autocorrelation function for MA model
pacfma<- ARMAacf(amgendata$amgen_Close, lag.max=9)
plot(1:10,pacfma, type="h", main="Partial Autocorrelation Function for MA Model", xlab="Lag", ylab="PACF")
abline(h=0)
#plotting actual and fitted MA(7) model values
MA7.model<- arima(amgendata$amgen_Close, order = c(0, 0, 7))
plot(as.POSIXct(amgendata$Date), amgendata$amgen_Close, main="Daily amgen Stock
Closing Prices with MA(7) Model", lty=1, pch="", xlab="Time",ylab="Stock Price", panel.first=grid())
lines(as.POSIXct(amgendata$Date), amgendata$amgen_Close, lwd=2, col="green")
lines(as.POSIXct(amgendata$Date), fitted(MA7.model), lwd=1, col="navy")
legend("topright", c("actual","MA(7) fitted"), lty=1, lwd=2, col=c("green","navy"))
#plotting actual and fitted MA(9) model values
MA9.model<- arima(amgendata$amgen_Close, order = c(0, 0, 9))
plot(as.POSIXct(amgendata$Date), amgendata$amgen_Close, main="Daily amgen Stock
Closing Prices with MA(9) Model", lty=1, pch="", xlab="Time",ylab="Stock Price", panel.first=grid())
lines(as.POSIXct(amgendata$Date), amgendata$amgen_Close, lwd=2, col="green")
lines(as.POSIXct(amgendata$Date), fitted(MA9.model), lwd=1, col="navy")
legend("topright", c("actual","MA(9) fitted"), lty=1, lwd=2, col=c("green","navy"))
#plotting actual and fitted MA(10) model values
MA10.model<- arima(amgendata$amgen_Close, order = c(0, 0, 10))
plot(as.POSIXct(amgendata$Date), amgendata$amgen_Close, main="Daily amgen Stock
Closing Prices with MA(10) Model", lty=1, pch="", xlab="Time",ylab="Stock Price", panel.first=grid())
lines(as.POSIXct(amgendata$Date), amgendata$amgen_Close, lwd=2, col="green")
lines(as.POSIXct(amgendata$Date), fitted(MA10.model), lwd=1, col="navy")
legend("topright", c("actual","MA(10) fitted"), lty=1, lwd=2, col=c("green","navy"))
#plotting partial autocorrelation function for MA model
pacfma<- ARMAacf(amgendata$amgen_Close, lag.max=9)
plot(1:10,pacfma, type="h", main="Partial Autocorrelation Function for MA Model", xlab="Lag", ylab="PACF")
abline(h=0)
#plotting actual and fitted MA(7) model values
MA7.model<- arima(amgendata$amgen_Close, order = c(0, 0, 7))
plot(as.POSIXct(amgendata$Date), amgendata$amgen_Close, main="Daily amgen Stock
Closing Prices with MA(7) Model", lty=1, pch="", xlab="Time",ylab="Stock Price", panel.first=grid())
lines(as.POSIXct(amgendata$Date), amgendata$amgen_Close, lwd=2, col="green")
lines(as.POSIXct(amgendata$Date), fitted(MA7.model), lwd=1, col="navy")
legend("topright", c("actual","MA(7) fitted"), lty=1, lwd=2, col=c("green","navy"))
#plotting actual and fitted MA(9) model values
MA9.model<- arima(amgendata$amgen_Close, order = c(0, 0, 9))
plot(as.POSIXct(amgendata$Date), amgendata$amgen_Close, main="Daily amgen Stock
Closing Prices with MA(9) Model", lty=1, pch="", xlab="Time",ylab="Stock Price", panel.first=grid())
lines(as.POSIXct(amgendata$Date), amgendata$amgen_Close, lwd=2, col="green")
lines(as.POSIXct(amgendata$Date), fitted(MA9.model), lwd=1, col="navy")
legend("topright", c("actual","MA(9) fitted"), lty=1, lwd=2, col=c("green","navy"))
#plotting actual and fitted MA(10) model values
MA10.model<- arima(amgendata$amgen_Close, order = c(0, 0, 10))
plot(as.POSIXct(amgendata$Date), amgendata$amgen_Close, main="Daily amgen Stock
Closing Prices with MA(10) Model", lty=1, pch="", xlab="Time",ylab="Stock Price", panel.first=grid())
lines(as.POSIXct(amgendata$Date), amgendata$amgen_Close, lwd=2, col="green")
lines(as.POSIXct(amgendata$Date), fitted(MA10.model), lwd=1, col="navy")
legend("topright", c("actual","MA(10) fitted"), lty=1, lwd=2, col=c("green","navy"))
```{r}
#fitting ARIMA(1,1) model
?arima
ARMA.model<- arima(amgendata$amgen_Close, order = c(1,0,1))
#plotting actual and fitted ARMA(1,1) model values
plot(as.POSIXct(amgendata$Date), amgendata$amgen_Close, main="Daily Tesla Stock
Closing Prices with ARMA(1,1) Model", lty=1, pch="", xlab="Time",ylab="Stock Price", panel.first=grid())
lines(as.POSIXct(amgendata$Date), amgendata$amgen_Close, lwd=2, col="green")
lines(as.POSIXct(amgendata$Date), fitted(ARMA.model), lwd=1, col="navy")
legend("topright", c("actual","ARMA(1,1) fitted"), lty=1, lwd=2, col=c("green","navy"))
#fitting ARIMA(1,1) model
?arima
ARMA.model<- arima(amgendata$amgen_Close, order = c(1,0,1))
ARIMA.model <- auto.arima(amgendata$amgen_Close)
# Load Required Libraries
if (!requireNamespace("zoo", quietly = TRUE)) {
install.packages("zoo")
}
if (!requireNamespace("TTR", quietly = TRUE)) {
install.packages("TTR")
}
if (!requireNamespace("quantmod", quietly = TRUE)) {
install.packages("quantmod")
}
if (!requireNamespace("plotly", quietly = TRUE)) {
install.packages("plotly")
}
if (!requireNamespace("fANCOVA", quietly = TRUE)) {
install.packages("fANCOVA")
}
install.packages("forecasting")
library(forecasting)
# Load Required Libraries
if (!requireNamespace("zoo", quietly = TRUE)) {
install.packages("zoo")
}
if (!requireNamespace("TTR", quietly = TRUE)) {
install.packages("TTR")
}
if (!requireNamespace("quantmod", quietly = TRUE)) {
install.packages("quantmod")
}
if (!requireNamespace("plotly", quietly = TRUE)) {
install.packages("plotly")
}
if (!requireNamespace("fANCOVA", quietly = TRUE)) {
install.packages("fANCOVA")
}
if (!requireNamespace("forecasting", quietly = TRUE)) {
install.packages("forecasting")
}
install.packages("forecasting")
library(forecasting)
# Load Required Libraries
if (!requireNamespace("zoo", quietly = TRUE)) {
install.packages("zoo")
}
if (!requireNamespace("TTR", quietly = TRUE)) {
install.packages("TTR")
}
if (!requireNamespace("quantmod", quietly = TRUE)) {
install.packages("quantmod")
}
if (!requireNamespace("plotly", quietly = TRUE)) {
install.packages("plotly")
}
if (!requireNamespace("fANCOVA", quietly = TRUE)) {
install.packages("fANCOVA")
}
if (!requireNamespace("forecast", quietly = TRUE)) {
install.packages("forecast")
}
library(forecaste)
# Load Required Libraries
if (!requireNamespace("zoo", quietly = TRUE)) {
install.packages("zoo")
}
if (!requireNamespace("TTR", quietly = TRUE)) {
install.packages("TTR")
}
if (!requireNamespace("quantmod", quietly = TRUE)) {
install.packages("quantmod")
}
if (!requireNamespace("plotly", quietly = TRUE)) {
install.packages("plotly")
}
if (!requireNamespace("fANCOVA", quietly = TRUE)) {
install.packages("fANCOVA")
}
if (!requireNamespace("forecast", quietly = TRUE)) {
install.packages("forecast")
}
library(forecast)
library(fANCOVA)
library(TTR)
library(quantmod)
library(dplyr)
library(ggplot2)
library(plotly)
#fitting ARIMA(1,1) model
?arima
ARMA.model<- arima(amgendata$amgen_Close, order = c(1,0,1))
ARIMA.model <- auto.arima(amgendata$amgen_Close)
#plotting actual and fitted ARMA(1,1) model values
plot(as.POSIXct(amgendata$Date), amgendata$amgen_Close, main="Daily Tesla Stock
Closing Prices with ARMA(1,1) Model", lty=1, pch="", xlab="Time",ylab="Stock Price", panel.first=grid())
lines(as.POSIXct(amgendata$Date), amgendata$amgen_Close, lwd=2, col="green")
lines(as.POSIXct(amgendata$Date), fitted(ARMA.model), lwd=1, col="navy")
legend("topright", c("actual","ARMA(1,1) fitted"), lty=1, lwd=2, col=c("green","navy"))
#fitting ARIMA(1,1) model
?arima
ARMA.model<- arima(amgendata$amgen_Close, order = c(1,0,1))
ARIMA.model <- auto.arima(amgendata$amgen_Close)
#plotting actual and fitted ARMA(1,1) model values
plot(as.POSIXct(amgendata$Date), amgendata$amgen_Close, main="Daily Tesla Stock
Closing Prices with ARMA(1,1) Model", lty=1, pch="", xlab="Time",ylab="Stock Price", panel.first=grid())
lines(as.POSIXct(amgendata$Date), amgendata$amgen_Close, lwd=2, col="green")
lines(as.POSIXct(amgendata$Date), fitted(ARIMA.model), lwd=1, col="navy")
legend("topright", c("actual","ARMA(1,1) fitted"), lty=1, lwd=2, col=c("green","navy"))
#fitting ARIMA(1,1) model
ARIMA.model <- auto.arima(amgendata$amgen_Close)
#plotting actual and fitted ARMA(1,1) model values
plot(as.POSIXct(amgendata$Date), amgendata$amgen_Close, main="Daily Tesla Stock
Closing Prices with ARMA(1,1) Model", lty=1, pch="", xlab="Time",ylab="Stock Price", panel.first=grid())
lines(as.POSIXct(amgendata$Date), amgendata$amgen_Close, lwd=2, col="green")
lines(as.POSIXct(amgendata$Date), fitted(ARIMA.model), lwd=1, col="navy")
legend("topright", c("actual","ARIMA(1,1) fitted"), lty=1, lwd=2, col=c("green","navy"))
#fitting ARIMA(1,1) model
ARIMA.model <- auto.arima(amgendata$amgen_Close)
head(ARIMA.model)
#plotting actual and fitted ARMA(1,1) model values
plot(as.POSIXct(amgendata$Date), amgendata$amgen_Close, main="Daily Tesla Stock
Closing Prices with ARMA(1,1) Model", lty=1, pch="", xlab="Time",ylab="Stock Price", panel.first=grid())
lines(as.POSIXct(amgendata$Date), amgendata$amgen_Close, lwd=2, col="green")
lines(as.POSIXct(amgendata$Date), fitted(ARIMA.model), lwd=1, col="navy")
legend("topright", c("actual","ARIMA(1,1) fitted"), lty=1, lwd=2, col=c("green","navy"))
nrow(amgendata)
#splitting data into testing and training sets
train.data<- amgendata[1:1000,1:2]
test.data<- amgendata[1001:1145,1:2]
# #plotting training and testing data
# plot(as.POSIXct(amgendata$Date), amgendata$amgen_Close, main="Daily Amgen Stock Closing Prices", xlab="Time", ylab="Stock Price", pch="", panel.first=grid())
# lines(as.POSIXct(train.data$Date), train.data$amgen_Close, lwd=2, col="blue")
# lines(as.POSIXct(test.data$Date), test.data$amgen_Close, lwd=2, col="green")
# legend("topright", c("training", "testing"), lty=1, lwd=2, col=c("blue","green"))
# #computing forecasted values for the fitted models
# n<- nrow(test.data)
# AR1.pred<- data.frame(predict(AR1.model, n.ahead=n))
# MA7.pred<- data.frame(predict(MA7.model, n.ahead=n))
# MA9.pred<- data.frame(predict(MA9.model, n.ahead=n))
# MA10.pred<- data.frame(predict(MA10.model, n.ahead=n))
# ARMA.pred<- data.frame(predict(ARMA.model, n.ahead=n))
# #plotting actual and AR(1) forecasted values for testing data
# plot(as.POSIXct(test.data$Date), test.data$amgen_Close, main="Amgen Stock Prices
# with AR(1) Forecasted Values", lty=1, pch="", xlab="Time",ylab="Stock Price", ylim=c(100,400), panel.first=grid())
# lines(as.POSIXct(test.data$Date), test.data$amgen_Close, lwd=2, col="green")
# lines(as.POSIXct(test.data$Date), AR1.pred$pred, lwd=2, col="navy")
# lines(as.POSIXct(test.data$Date), AR1.pred$pred-1.96*AR1.pred$se, lty=2, lwd=2, col="navy")
# lines(as.POSIXct(test.data$Date), AR1.pred$pred+1.96*AR1.pred$se, lty=2, lwd=2, col="navy")
# legend("bottomleft", c("actual","AR(1) forecast","Conf. band"), lty=c(1,1,3),
# lwd=2, col=c("green","navy","navy"), cex=0.7)
# #plotting actual and MA(7) forecasted values for testing data
# plot(as.POSIXct(test.data$Date), test.data$amgen_Close, main="Amgen Stock Prices
# with MA(7) Forecasted Values", lty=1, pch="", xlab="Time",ylab="Stock Price", ylim=c(100,400), panel.first=grid())
# lines(as.POSIXct(test.data$Date), test.data$amgen_Close, lwd=2, col="green")
# lines(as.POSIXct(test.data$Date), MA7.pred$pred, lwd=2, col="navy")
# lines(as.POSIXct(test.data$Date), MA7.pred$pred-1.96*AR1.pred$se, lty=2, lwd=2, col="navy")
# lines(as.POSIXct(test.data$Date), MA7.pred$pred+1.96*AR1.pred$se, lty=2, lwd=2, col="navy")
# legend("bottomleft", c("actual","MA(1) forecast","Conf. band"), lty=c(1,1,3),
# lwd=2, col=c("green","navy","navy"), cex=0.7)
# #plotting actual and MA(9) forecasted values for testing data
# plot(as.POSIXct(test.data$Date), test.data$amgen_Close, main="Amgen Stock Prices
# with MA(9) Forecasted Values", lty=1, pch="", xlab="Time",ylab="Stock Price", ylim=c(100,400),
# panel.first=grid())
# lines(as.POSIXct(test.data$Date), test.data$amgen_Close, lwd=2, col="green")
# lines(as.POSIXct(test.data$Date), MA9.pred$pred, lwd=2, col="navy")
# lines(as.POSIXct(test.data$Date), MA9.pred$pred-1.96*AR1.pred$se, lty=2, lwd=2, col="navy")
# lines(as.POSIXct(test.data$Date), MA9.pred$pred+1.96*AR1.pred$se, lty=2, lwd=2, col="navy")
# legend("bottomleft", c("actual","MA(4) forecast","Conf. band"), lty=c(1,1,3),
# lwd=2, col=c("green","navy","navy"), cex=0.7)
# #plotting actual and MA(10) forecasted values for testing data
# plot(as.POSIXct(test.data$Date), test.data$amgen_Close, main="Amgen Stock Prices
# with MA(10) Forecasted Values", lty=1, pch="", xlab="Time",ylab="Stock Price", ylim=c(100,400),
# panel.first=grid())
# lines(as.POSIXct(test.data$Date), test.data$amgen_Close, lwd=2, col="green")
# lines(as.POSIXct(test.data$Date), MA10.pred$pred, lwd=2, col="navy")
# lines(as.POSIXct(test.data$Date), MA10.pred$pred-1.96*AR1.pred$se, lty=2, lwd=2, col="navy")
# lines(as.POSIXct(test.data$Date), MA10.pred$pred+1.96*AR1.pred$se, lty=2, lwd=2, col="navy")
# legend("bottomleft", c("actual","MA(4) forecast","Conf. band"), lty=c(1,1,3),
# lwd=2, col=c("green","navy","navy"), cex=0.7)
# #plotting actual and ARMA(1,1) forecasted values for testing data
# plot(as.POSIXct(test.data$Date), test.data$amgen_Close, main="Amgen Stock Prices
# with ARMA(1,1) Forecasted Values", lty=1, pch="", xlab="Time",ylab="Stock Price", ylim=c(100,400),
# panel.first=grid())
# lines(as.POSIXct(test.data$Date), test.data$amgen_Close, lwd=2, col="green")
# lines(as.POSIXct(test.data$Date), ARMA.pred$pred, lwd=2, col="navy")
# lines(as.POSIXct(test.data$Date), ARMA.pred$pred-1.96*AR1.pred$se, lty=2, lwd=2, col="navy")
# lines(as.POSIXct(test.data$Date), ARMA.pred$pred+1.96*AR1.pred$se, lty=2, lwd=2, col="navy")
# legend("bottomleft", c("actual","ARMA(1,1) forecast","Conf. band"), lty=c(1,1,3),
# lwd=2, col=c("green","navy","navy"), cex=0.7)
n<- nrow(test.data)
ARIMA.pred<- data.frame(predict(ARIMA.model, n.ahead=n))
nrow(amgendata)
#splitting data into testing and training sets
train.data<- amgendata[1:1000,1:2]
test.data<- amgendata[1001:1145,1:2]
# #plotting training and testing data
# plot(as.POSIXct(amgendata$Date), amgendata$amgen_Close, main="Daily Amgen Stock Closing Prices", xlab="Time", ylab="Stock Price", pch="", panel.first=grid())
# lines(as.POSIXct(train.data$Date), train.data$amgen_Close, lwd=2, col="blue")
# lines(as.POSIXct(test.data$Date), test.data$amgen_Close, lwd=2, col="green")
# legend("topright", c("training", "testing"), lty=1, lwd=2, col=c("blue","green"))
# #computing forecasted values for the fitted models
# n<- nrow(test.data)
# AR1.pred<- data.frame(predict(AR1.model, n.ahead=n))
# MA7.pred<- data.frame(predict(MA7.model, n.ahead=n))
# MA9.pred<- data.frame(predict(MA9.model, n.ahead=n))
# MA10.pred<- data.frame(predict(MA10.model, n.ahead=n))
# ARMA.pred<- data.frame(predict(ARMA.model, n.ahead=n))
# #plotting actual and AR(1) forecasted values for testing data
# plot(as.POSIXct(test.data$Date), test.data$amgen_Close, main="Amgen Stock Prices
# with AR(1) Forecasted Values", lty=1, pch="", xlab="Time",ylab="Stock Price", ylim=c(100,400), panel.first=grid())
# lines(as.POSIXct(test.data$Date), test.data$amgen_Close, lwd=2, col="green")
# lines(as.POSIXct(test.data$Date), AR1.pred$pred, lwd=2, col="navy")
# lines(as.POSIXct(test.data$Date), AR1.pred$pred-1.96*AR1.pred$se, lty=2, lwd=2, col="navy")
# lines(as.POSIXct(test.data$Date), AR1.pred$pred+1.96*AR1.pred$se, lty=2, lwd=2, col="navy")
# legend("bottomleft", c("actual","AR(1) forecast","Conf. band"), lty=c(1,1,3),
# lwd=2, col=c("green","navy","navy"), cex=0.7)
# #plotting actual and MA(7) forecasted values for testing data
# plot(as.POSIXct(test.data$Date), test.data$amgen_Close, main="Amgen Stock Prices
# with MA(7) Forecasted Values", lty=1, pch="", xlab="Time",ylab="Stock Price", ylim=c(100,400), panel.first=grid())
# lines(as.POSIXct(test.data$Date), test.data$amgen_Close, lwd=2, col="green")
# lines(as.POSIXct(test.data$Date), MA7.pred$pred, lwd=2, col="navy")
# lines(as.POSIXct(test.data$Date), MA7.pred$pred-1.96*AR1.pred$se, lty=2, lwd=2, col="navy")
# lines(as.POSIXct(test.data$Date), MA7.pred$pred+1.96*AR1.pred$se, lty=2, lwd=2, col="navy")
# legend("bottomleft", c("actual","MA(1) forecast","Conf. band"), lty=c(1,1,3),
# lwd=2, col=c("green","navy","navy"), cex=0.7)
# #plotting actual and MA(9) forecasted values for testing data
# plot(as.POSIXct(test.data$Date), test.data$amgen_Close, main="Amgen Stock Prices
# with MA(9) Forecasted Values", lty=1, pch="", xlab="Time",ylab="Stock Price", ylim=c(100,400),
# panel.first=grid())
# lines(as.POSIXct(test.data$Date), test.data$amgen_Close, lwd=2, col="green")
# lines(as.POSIXct(test.data$Date), MA9.pred$pred, lwd=2, col="navy")
# lines(as.POSIXct(test.data$Date), MA9.pred$pred-1.96*AR1.pred$se, lty=2, lwd=2, col="navy")
# lines(as.POSIXct(test.data$Date), MA9.pred$pred+1.96*AR1.pred$se, lty=2, lwd=2, col="navy")
# legend("bottomleft", c("actual","MA(4) forecast","Conf. band"), lty=c(1,1,3),
# lwd=2, col=c("green","navy","navy"), cex=0.7)
# #plotting actual and MA(10) forecasted values for testing data
# plot(as.POSIXct(test.data$Date), test.data$amgen_Close, main="Amgen Stock Prices
# with MA(10) Forecasted Values", lty=1, pch="", xlab="Time",ylab="Stock Price", ylim=c(100,400),
# panel.first=grid())
# lines(as.POSIXct(test.data$Date), test.data$amgen_Close, lwd=2, col="green")
# lines(as.POSIXct(test.data$Date), MA10.pred$pred, lwd=2, col="navy")
# lines(as.POSIXct(test.data$Date), MA10.pred$pred-1.96*AR1.pred$se, lty=2, lwd=2, col="navy")
# lines(as.POSIXct(test.data$Date), MA10.pred$pred+1.96*AR1.pred$se, lty=2, lwd=2, col="navy")
# legend("bottomleft", c("actual","MA(4) forecast","Conf. band"), lty=c(1,1,3),
# lwd=2, col=c("green","navy","navy"), cex=0.7)
# #plotting actual and ARMA(1,1) forecasted values for testing data
# plot(as.POSIXct(test.data$Date), test.data$amgen_Close, main="Amgen Stock Prices
# with ARMA(1,1) Forecasted Values", lty=1, pch="", xlab="Time",ylab="Stock Price", ylim=c(100,400),
# panel.first=grid())
# lines(as.POSIXct(test.data$Date), test.data$amgen_Close, lwd=2, col="green")
# lines(as.POSIXct(test.data$Date), ARMA.pred$pred, lwd=2, col="navy")
# lines(as.POSIXct(test.data$Date), ARMA.pred$pred-1.96*AR1.pred$se, lty=2, lwd=2, col="navy")
# lines(as.POSIXct(test.data$Date), ARMA.pred$pred+1.96*AR1.pred$se, lty=2, lwd=2, col="navy")
# legend("bottomleft", c("actual","ARMA(1,1) forecast","Conf. band"), lty=c(1,1,3),
# lwd=2, col=c("green","navy","navy"), cex=0.7)
n<- nrow(test.data)
ARIMA.pred<- data.frame(predict(ARIMA.model, n.ahead=n))
#plotting actual and ARIMA forecasted values for testing data
plot(as.POSIXct(test.data$Date), test.data$amgen_Close, main="Amgen Stock Prices
with ARIMA Forecasted Values", lty=1, pch="", xlab="Time",ylab="Stock Price", ylim=c(100,400), panel.first=grid())
lines(as.POSIXct(test.data$Date), test.data$amgen_Close, lwd=2, col="green")
lines(as.POSIXct(test.data$Date), ARIMA.pred$pred, lwd=2, col="navy")
lines(as.POSIXct(test.data$Date), ARIMA.pred$pred-1.96*ARIMA.pred$se, lty=2, lwd=2, col="navy")
lines(as.POSIXct(test.data$Date), ARIMA.pred$pred+1.96*ARIMA.pred$se, lty=2, lwd=2, col="navy")
legend("bottomleft", c("actual","ARIMA forecast","Conf. band"), lty=c(1,1,3),
lwd=2, col=c("green","navy","navy"), cex=0.7)
#fitting ARIMA(1,1) model
ARIMA.model <- auto.arima(amgendata$amgen_Close)
head(ARIMA/)
#fitting ARIMA(1,1) model
ARIMA.model <- auto.arima(amgendata$amgen_Close)
plot(forecast(ARIMA.model,h=20))
#plotting actual and fitted ARMA(1,1) model values
plot(as.POSIXct(amgendata$Date), amgendata$amgen_Close, main="Daily Tesla Stock
Closing Prices with ARMA(1,1) Model", lty=1, pch="", xlab="Time",ylab="Stock Price", panel.first=grid())
lines(as.POSIXct(amgendata$Date), amgendata$amgen_Close, lwd=2, col="green")
lines(as.POSIXct(amgendata$Date), fitted(ARIMA.model), lwd=1, col="navy")
legend("topright", c("actual","ARIMA(1,1) fitted"), lty=1, lwd=2, col=c("green","navy"))
#fitting ARIMA(1,1) model
ARIMA.model <- auto.arima(amgendata$amgen_Close)
plot(forecast(ARIMA.model,h=20))
#fitting ARIMA(1,1) model
ARIMA.model <- auto.arima(amgendata$amgen_Close)
forecasted <- forecast(ARIMA.model, h=20)
# Plot with zoom on the end
plot(forecasted, xlim=c(1100, 1220))
#fitting ARIMA(1,1) model
ARIMA.model <- auto.arima(amgendata$amgen_Close)
forecasted <- forecast(ARIMA.model, h=20)
# Plot with zoom on the end
plot(forecasted, xlim=c(1140, 1180))
#fitting ARIMA(1,1) model
ARIMA.model <- auto.arima(amgendata$amgen_Close)
forecasted <- forecast(ARIMA.model, h=20)
# Plot with zoom on the end
plot(forecasted, xlim=c(1145, 1180))
#fitting ARIMA(1,1) model
ARIMA.model <- auto.arima(amgendata$amgen_Close)
forecasted <- forecast(ARIMA.model, h=20)
# Plot with zoom on the end
plot(forecasted, xlim=c(1145, 1180), ylim = c(300,350))
#fitting ARIMA(1,1) model
ARIMA.model <- auto.arima(amgendata$amgen_Close)
forecasted <- forecast(ARIMA.model, h=20)
# Plot with zoom on the end
plot(forecasted, xlim=c(1145, 1180), ylim = c(300,400))
#fitting ARIMA(1,1) model
ARIMA.model <- auto.arima(amgendata$amgen_Close)
forecasted <- forecast(ARIMA.model, h=20)
# Plot with zoom on the end
plot(forecasted, xlim=c(1145, 1180), ylim = c(300,360))
